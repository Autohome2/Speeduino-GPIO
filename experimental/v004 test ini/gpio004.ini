;-------------------------------------------------------------------------------
;This enables CAN commands by default
#set CAN_COMMANDS
#unset INI_VERSION_2 ; this is set by TunerStudio, but needs to be unset for Megatune to work
#set SHOW_INDICATORS ; This is used to remove the indicators and speed up the frames rate
                     ; WARNING: This means TunerStudio is not aware that a config error has occured and won't
                     ; retrieve the error message
					 
[MegaTune]
   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.
   
;[TunerStudio]
 ;  iniSpecVersion = 3.24
   
#if CAN_COMMANDS
   versionInfo    = "r\$tsCanId\x0e\x00\x00\x00\x00\x3c"  ; Put this in the title bar. the 3c if telling to send 60 bytes
   ;queryCommand   = "r\x04\x0f\x00\x00\x00\x14"  ; Verify against signature.
   queryCommand   = "r\$tsCanId\xAB\x00\x00\x00\x00\x14"  ; the x14 is telling to send 20 bytes back
#else
	versionInfo    = "S"  ; Put this in the title bar.
   queryCommand   = "Q"  ; Verify against signature.
   #endif   
   signature      = "IOExtender V0.2.00  "
				   ; 123456789.123456789.
;-------------------------------------------------------------------------------
[PcVariables]
   ; valid types: boolean, double, int, list
   ;  
   ; no offset as they are local variables. 
   ; entry format the same as Constants, except there is no offset.
   ; arrays are not yet supported. 
   ; name = class,  type,    shape,  units,       scale, translate,    lo,      hi, digits
   ; name = type, min, max;
   ;
   ; type List: value will be index.
   
  ; tsCanId       	= bits,   	U08,   [0:3] ; The short one, just numbers
   tsCanId        	= bits,   	U08,   [0:3], "CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","INVALID"
   port_CanId      = bits,   	U08,   [0:3], ""
   algorithmUnits 	= bits,   	U08,   [0:3], "%", "kPa",
   portLabels	  	= bits, 	U08,   [0:7], "unused", "injection LED", "warmup LED", "squirt LED", "fuel pump"
   io_pin_labels	= bits,		U08,   [0:7]  "PortA0", "PortA1", "PortA2", "PortA3", "PortA4", "PortA5", "PortA6", "PortA7", "PortB0", "PortB1", "PortB2", "PortB3", "PortB4", "PortB5", "PortB6", "PortB7", "PortC0", "PortC1", "PortC2", "PortC3", "PortC4", "PortC5", "PortC6", "PortC7","PortD0", "PortD1", "PortD2", "PortD3", "PortD4", "PortD5", "PortD6", "PortD7"
   obd_labels	  	= bits, 	U08,   [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
   STD_DTC_labels	= bits, 	U08,   [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
   STD_PID_labels   = bits, 	U08,   [0:7], "", "PID 01", "PID 02", "PID 03", "PID 04", "PID 05", "PID 06", "PID 07", "PID 08", "PID 09", "PID 0A", "PID 0B", "PID 0C", "PID 0D", "PID 0E", "PID 0F", "PID 10", "PID 11", "PID 12", "PID 13", "PID 14", "PID 15", "PID 16", "PID 17", "PID 18", "PID 19", "PID 1A", "PID 1B", "PID 1C", "PID 1D", "PID 1E", "PID 1F", "INVALID", "PID 21", "PID 22", "PID 23", "PID 24", "PID 25", "PID 26", "PID 27", "PID 28", "PID 29", "PID 2A", "PID 2B", "PID 2C", "PID 2D", "PID 2E", "PID 2F", "PID 30", "PID 31", "PID 32", "PID 33", "PID 34", "PID 35", "PID 36", "PID 37", "PID 38", "PID 39", "PID 3A", "PID 3B", "PID 3C", "PID 3D", "PID 3E", "PID 3F", "INVALID"
   PID_txt_labels   = bits,		U08,   [0:7], "", "p1", "p2", "p3", " Calculated engine load ", "Engine coolant temperature", "Short term fuel trimâ€”Bank 1", "p7", "p8", " Long term fuel trim - Bank 2 ", "Fuel pressure (gauge pressure)", "Intake manifold absolute pressure", "Engine RPM", "Vehicle speed", "Timing advance", "pf", "p10", "Throttle position", "p12", "p13", "p14", "p15", "p16", "p17" , "p18", "p19", "p1a", "p1b", "p1c", "p1d", "p1e", "p1f", "", "p21"
   mybyte_labels	= bits,     U08,   [0:7], "Unused", "byte 1", "byte 2", "byte 3", "byte 4", "byte 5", "byte 6", "byte 7", "byte 8", "byte 9", "byte 10", "byte 11", "byte 12", "byte 13", "byte 14", "byte 15"
	true_canid		= bits,		U16,	[0:10],"", "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"
	pwm_channel_select = bits,	U08,	[0:3], "INVALID", "pwm1", "pwm2", "pwm3", "pwm4", "pwm5", "pwm6"
[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Temperatures are fine, check out the Fielding IAC example (fastIdleT).
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is layed
   ; out like.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ; If you specify a label as "INVALID" (all upper case), then it will
   ; not be displayed in the combo box, so you can leave out values that
   ; make no sense.
   ;
   ;----------------------------------------------------------------------------
; The commands sent to the GPIO are formatted "command\CAN_ID\table_ID\tableid\offset\data"
;    %2i is the id/table number - 2 bytes
;    %2o is the table offset - 2 bytes
;    %2c is the number of bytes to be read/written
;    %v is the byte to be written

; in CAN mode format is command\can_id\ref_id\2byte offset\data \ 2 byte length.
 
 ;  pageActivationDelay = 500 ; Milliseconds delay after burn command.
   blockReadTimeout    = 700 ; Milliseconds total timeout for reading page.
;     tsWriteBlocks =      on
   ;writeBlocks = on
   interWriteDelay = 0
  ; interWriteDelay = 1 ; Becomes "interCommandDelay" if writeBlocks is "on"
  ;interCommandDelay = 5
  
   endianness          	= little
   nPages              	= 7
#if CAN_COMMANDS
   burnCommand         	= "r\$tsCanId\xA1\x01\x00\x00\x00\x00","r\$tsCanId\xA1\x02\x00\x00\x00\x00","r\$tsCanId\xA1\x03\x00\x00\x00\x00","r\$tsCanId\xA1\x04\x00\x00\x00\x00","r\$tsCanId\xA1\x05\x00\x00\x00\x00","r\$tsCanId\xA1\x06\x00\x00\x00\x00","r\$tsCanId\xA1\x07\x00\x00\x00\x00"
#else
   burnCommand         	= "B","B","B","B","B", "B", "B"
#endif
   
   pageSize            	= 64,443,384,744,255, 510, 255
   pageActivationDelay 	= 10
;  pageActivate        = ""				
#if CAN_COMMANDS
   pageActivate			= "r\$tsCanId\xA7\x01\x00\x01\x00\x01", "r\$tsCanId\xA7\x02\x00\x02\x00\x01", "r\$tsCanId\xA7\x03\x00\x03\x00\x01", "r\$tsCanId\xA7\x04\x00\x04\x00\x01", "r\$tsCanId\xA7\x05\x00\x05\x00\x01", "r\$tsCanId\xA7\x06\x00\x06\x00\x01", "r\$tsCanId\xA7\x07\x00\x07\x00\x01"
   pageReadCommand		= "r\$tsCanId\xAC\x01\x00\x00\x00\x40", "r\$tsCanId\xAC\x02\x00\x00\x00\x40", "r\$tsCanId\xAC\x03\x00\x00\x01\x80", "r\$tsCanId\xAC\x04\x00\x00\x02\xE8", "r\$tsCanId\xAC\x05\x00\x00\x00\xFF", "r\$tsCanId\xAC\x06\x00\x00\x01\xFE", "r\$tsCanId\xAC\x07\x00\x00\x00\xFF"
   ;r\$tsCanId\xA7\x00\x01\x00\x01 where xA7 = decimal 167 is the new equiv for P and the first x01 is the page number
	;r\$tsCanId\xAC\x00\x00\x00\x01 where xAC = decimal 172 is the new equiv for V 
	;structure is r\canid\xAC\page\offset1\offset2\length1\length2
   ; caps P = x50
   ;caps V = x56
   
   pageValueWrite      	= "w\$tsCanId\x01\%o%2c%v","w\$tsCanId\x02\%o%2c%v", "w\$tsCanId\x03\%2o%2c%v","w\$tsCanId\x04\%2o%2c%v", "w\$tsCanId\x05\%o%2c%v", "w\$tsCanId\x06\%2o%2c%v", "w\$tsCanId\x07\%2o%2c%v"
   ;"w\$tsCanId\x04%2o%2c%v"
   ; caps W = x57 lower case w == x77
   
;  pageChunkWrite      = ""      ; No chunk write for standard MS
#else
   pageActivate        	= "P\x01", "P\x02",	"P\x03", "P\x04",	"P\x05", "P\x06", "P\x07"
   pageReadCommand     	= "V\x63\x00\x40",	"V\x63\x00\x40",	 "V\x63\x01\x80",	"V\x63\x02\xE8",	 "V\x63\x00\xFF", "V\x63\x01\xFE" ,"V\x63\x01\xFF"
   pageValueWrite 		= "W\x63\x01\%2o%v", "W\x63\x02\%2o%v",	"W\x63\x03\%2o%v", "W\x63\x04\%2o%v",	"W\x63\x05\%2o%v", "W\x63\x06\%2o%v", "W\x63\x07\%2o%v"
   ; use "W%2o%v" for maps
   ;the x63 in the read command sends 99dec which the bridge uses as an unknown canid so will always read regardless of actual canid
#endif

   blockingFactor = 2048
   delayAfterPortOpen=1000
   
;Page 1 is the local device configuration
page = 1
   ;  name            		= class,  type,		offset,      shape,   units,    scale,	translate,	lo,	hi,	digits
	 gpio_canid    			= bits,   U08,   	0, 			[0:3], 	"CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","CAN ID 15"
	 gpio_true_canid 		= bits,   U16,   	1, 			[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"
	 gpio_obd_canid	    	= bits,   U08,   	3,     		[0:3], 	"0x7DF", "0x7E0", "0x7E1", "0x7E2", "0x7E3", "0x7E4", "0x7E5", "0x7E6", "0x7E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
	 gpio_true_can_bcast 	= bits,   U08,	 	4,    		[0:2], 	"Off", "Broadcast1", "Broadcast1+2", "Broadcast1-3", "Broadcast1-4", "INVALID", "INVALID", "INVALID"
	 gpio_Bcast1_true_canid = bits,   U16,   	5, 			[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
	 ECU_canid	      		= bits,   U08,	 	7, 			[0:3], 	"CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","CAN ID 15"
	 ECU_true_canid     	= bits,   U16,   	8, 			[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
	 ECU_obd_canid		    = bits,   U08,   	10,    		[0:3], 	"0x7DF", "0x7E0", "0x7E1", "0x7E2", "0x7E3", "0x7E4", "0x7E5", "0x7E6", "0x7E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
;	 can_poll_id0     		= scalar, U08,   	11,         "",      1.00000,   0.00000,  0.00,    14,      0 ;
;     can_poll_id1     		= scalar, U08,   	12,      	"",      1.00000,   0.00000,  0.00,    14,      0 ;
	 rpmhigh				= scalar, U16, 	 	11,			"rpm", 	 1, 		0, 		  0,       30000,   0
     can_poll_id2     		= scalar, U08,   	13,      	"",      1.00000,   0.00000,  0.00,    14,      0 ;
     can_poll_id3     		= scalar, U08,   	14,      	"",      1.00000,   0.00000,  0.00,    14,      0 ;	  
	 can_bcast1_on    		= bits,   U08,   	15,         [0:0],  "Off", "On"
     can_bcast1_280x4 		= bits,   U08,   	15,         [1:1],  "Off", "On"
     can_bcast1_280x1 		= bits,   U08,   	15,         [2:2],  "Off", "On"
     can_bcast1_289   		= bits,   U08,   	15,         [3:3],  "Off", "On"
     can_bcast1_316   		= bits,   U08,   	15,         [4:4],  "Off", "On"
     can_bcast1_329   		= bits,   U08,   	15,         [5:5],  "Off", "On"
     can_bcast1_561   		= bits,   U08,   	15,         [6:6],  "Off", "On"
     can_bcast1_361   		= bits,   U08,   	15,         [7:7],  "Off", "On"
     can_bcast2_041   		= bits,   U08,   	16,         [0:0],  "Off", "On"
     1spare16b		 		= bits,   U08,   	16,         [1:1],  "Off", "On"
     1spare16c		 		= bits,   U08,   	16,         [2:2],  "Off", "On"
     1spare16d	     		= bits,   U08,   	16,         [3:3],  "Off", "On"
     1spare16e   	 		= bits,   U08,   	16          [4:4],  "Off", "On"
     1spare16f		 		= bits,   U08,   	16,         [5:5],  "Off", "On"
     1spare16g		 		= bits,   U08,   	16,         [6:6],  "Off", "On"
     1spare16h       		= bits,   U08,   	16,         [7:7],  "Off", "On"
	 poll_tableports 		= scalar, U08,   	17,         "ms",    0.1,       0.0,   0.0,        25.5,    1
     can_poll        		= scalar, U08,   	18,         "RPM",   100.0,     0.0,   100,        25500,   0
     1unused19        		= scalar, U08,   	19,         "RPM",   100.0,     0.0,   100,        25500,   0
	 can_device00    		= bits,   U08,   	20,         [0:3],	"Off"
     can_device01    		= bits,   U08,   	20,         [4:7],	"Off"
     can_device02    		= bits,   U08,   	21,      	[0:3],	"Off"
     can_device03    		= bits,   U08,   	21,      	[4:7],	"Off"
     can_device04    		= bits,   U08,   	22,      	[0:3],	"Off"
     can_device05    		= bits,   U08,   	22,      	[4:7],	"Off"
	 can_device06    		= bits,   U08,   	23,      	[0:3],	"Off"
     can_device07    		= bits,   U08,   	23,      	[4:7],	"Off"
     can_device08    		= bits,   U08,   	24,      	[0:3],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device09    		= bits,   U08,   	24,      	[4:7],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device10    		= bits,   U08,   	25,      	[0:3],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device11    		= bits,   U08,   	25,      	[4:7],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device12    		= bits,   U08,   	26,      	[0:3],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device13    		= bits,   U08,   	26,      	[4:7],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device14    		= bits,   U08,   	27,      	[0:3],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
	 can_device15	 		= bits,   U08,   	27,	  		[4:7],	"Off", "1", "2", "3", "4", "5", "6" , "7", "8", "9", "10", "11", "12", "13", "14", "15"
     can_device00_Bcast 	= bits,   U08,   	28,       	[0:0],	"Active", "InActive"
     can_device01_Bcast 	= bits,   U08,   	28,       	[1:1],	"Active", "InActive"
     can_device02_Bcast 	= bits,   U08,   	28,       	[2:2],	"Active", "InActive"
     can_device03_Bcast 	= bits,   U08,   	28,       	[3:3],	"Active", "InActive"
     can_device04_Bcast 	= bits,   U08,   	28,       	[4:4],	"Active", "InActive"
     can_device05_Bcast 	= bits,   U08,   	28,       	[5:5],	"Active", "InActive"
     can_device06_Bcast 	= bits,   U08,   	28,       	[6:6],	"Active", "InActive"
     can_device07_Bcast 	= bits,   U08,   	28,       	[7:7],	"Active", "InActive"
     can_device08_Bcast 	= bits,   U08,   	29,       	[0:0],	"Active", "InActive"
     can_device09_Bcast 	= bits,   U08,   	29,       	[1:1],	"Active", "InActive"
     can_device10_Bcast 	= bits,   U08,   	29,       	[2:2],	"Active", "InActive"
     can_device11_Bcast 	= bits,   U08,   	29,       	[3:3],	"Active", "InActive"
     can_device12_Bcast 	= bits,   U08,   	29,       	[4:4],	"Active", "InActive"
     can_device13_Bcast 	= bits,   U08,   	29,       	[5:5],	"Active", "InActive"
     can_device14_Bcast 	= bits,   U08,   	29,       	[6:6],	"Active", "InActive"
     can_device15_Bcast 	= bits,   U08,   	29,       	[7:7],	"Active", "InActive"																   
     pinLayout  			= bits,   U08,   	30, 		[0:3],  "GPIO v0.1", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     1unused31        		= scalar, U08,   	31,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused32        		= scalar, U08,   	32,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused33        		= scalar, U08,   	33,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused34        		= scalar, U08,   	34,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused35        		= scalar, U08,   	35,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused36        		= scalar, U08,   	36,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused37        		= scalar, U08,   	37,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused38        		= scalar, U08,   	38,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused39        		= scalar, U08,   	39,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused40        		= scalar, U08,   	40,        "RPM",    100.0,  0.0,   100,     25500,    0 
     can_bcast_int_a   		= scalar, U08,   	41, 	   "ms",     0.128,  0.00000, 50, 	 1000,     1
	 can_bcast_int_b   		= scalar, U08,   	42,        "ms",     0.128,  0.00000, 50,    1000,     1
	 poll_offsetPWM_a  		= scalar, U08,   	43,         "",      1,      0.0,   0.0,     15,       0
	 poll_offsetPWM_b  		= scalar, U08,   	44,         "",      1,      0.0,   0.0,     15,       0
     1unused45        		= scalar, U08,   	45,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused46        		= scalar, U08,   	46,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused47        		= scalar, U08,   	47,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused48        		= scalar, U08,   	48,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused49        		= scalar, U08,   	49,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused50        		= scalar, U08,   	50,        "RPM",    100.0,  0.0,   100,     25500,    0
	 1unused51        		= scalar, U08,   	51,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused52        		= scalar, U08,   	52,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused53        		= scalar, U08,   	53,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused54        		= scalar, U08,   	54,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused55        		= scalar, U08,   	55,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused56        		= scalar, U08,   	56,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused57        		= scalar, U08,   	57,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused58        		= scalar, U08,   	58,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused59        		= scalar, U08,   	59,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused60        		= scalar, U08,   	60,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused61        		= scalar, U08,   	61,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused62        		= scalar, U08,   	62,        "RPM",    100.0,  0.0,   100,     25500,    0
     1unused63        		= scalar, U08,   	63,        "RPM",    100.0,  0.0,   100,     25500,    0

	  ;Page 2 is the obd / eobd configuration
page = 2
   ;  name            = class, 		 type,   offset,      shape,   units,    scale, translate,    lo,      hi, digits
     obd_active 		= bits,  	U08,       	0,           [0:0]
	 2unused0b		 	= bits,     U08,       	0,           [1:1], "Off", "On"
     2unused0c 			= bits,     U08,    	0,           [2:2], "Off", "On"
     2unused0d   		= bits,     U08,    	0,           [3:3], "Off", "On"
     2unused0e   		= bits,     U08,    	0,           [4:4], "Off", "On"
     2unused0f   		= bits,     U08,    	0,           [5:5], "Off", "On"
     2unused0g   		= bits,     U08,    	0,           [6:6], "Off", "On"
     2unused0h   		= bits,     U08,    	0,           [7:7], "Off", "On"
     obd_address00    	= bits,  	U08,   		1,           [0:3], "0x7DF", "0x7E0", "0x7E1", "0x7E2", "0x7E3", "0x7E4", "0x7E5", "0x7E6", "0x7E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address01    	= bits,  	U08,   		1,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address02    	= bits,  	U08,   		2,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address03    	= bits,  	U08,   		2,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address04    	= bits,  	U08,   		3,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address05    	= bits,  	U08,   		3,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address06    	= bits,  	U08,   		4,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address07    	= bits,  	U08,   		4,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address08    	= bits,  	U08,   		5,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address09    	= bits,  	U08,   		5,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address10    	= bits,  	U08,   		6,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address11    	= bits,  	U08,   		6,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address12    	= bits,  	U08,   		7,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address13    	= bits,  	U08,   		7,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address14    	= bits,  	U08,   		8,           [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     obd_address15    	= bits,  	U08,   		8,           [4:7], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
	 ;enabled_obd_value  = obd_value, "PM3 - Injection LED D14",	
     IgnAlgorithm    	= bits,    	U08,   		9,      	 [0:3], "0x**DF", "0x**E0", "0x**E1", "0x**E2", "0x**E3", "0x**E4", "0x**E5", "0x**E6", "0x**E7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
	 ;RotarySplitLoad = array, U16,   862, [ 8 ], { bitStringValue( algorithmUnits ,  IgnAlgorithm  ) }, 0.10000, 0.00000, 0, {loadhigh}, 0    
	 ;port_useage_a     = array,   U08,        10,    		 [8], "",  1, 0,      0,     1, 0, noSizeMutation
	 
	 portusage_a  		= array,   U08,        10,           [8], "", 1, 0, 0, 1, 0,noMsqSave
	 ;, noMsqSave

     chooseport			= bits,		U08,	18,			  [0:3]

	 ;gen_pin_enable 	= bits,     U08,    20,           [0:0], "Off", "On"
     ;gen_pwm_enableB 	= bits,     U08,    20,           [1:1], "Off", "On"
     ;port_pin_type  	= bits,     U08,    20,           [6:7], "Digital", "PWM1", "PWM2", "PWM3"
     ;gen_pwm_servoB  	= bits,     U08,    20,           [7:7], "PWM", "RC Servo"
     pwm1_port_pin   	= bits,     U08,    19,      	  [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     pwm2_port_pin   	= bits,     U08,    19,           [4:7], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
	 pwm3_port_pin   	= bits,     U08,    20,      	  [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     pwm4_port_pin   	= bits,     U08,    20,           [4:7], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     pwm5_port_pin   	= bits,     U08,    21,      	  [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     pwm6_port_pin   	= bits,     U08,    21,           [4:7], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
	 pwm7_port_pin   	= bits,     U08,    22,      	  [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     pwm8_port_pin   	= bits,     U08,    22,           [4:7], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"

     pwm1_curve_table   	= bits,    U08, 	23, 	[0:0], "Table", "Curve"
	 pwm2_curve_table     	= bits,    U08, 	23, 	[1:1], "Table", "Curve"
     pwm3_curve_table   	= bits,    U08, 	23, 	[2:2], "Table", "Curve"
	 pwm4_curve_table     	= bits,    U08, 	23, 	[3:3], "Table", "Curve"
     pwm5_curve_table   	= bits,    U08, 	23, 	[4:4], "Table", "Curve"
	 pwm6_curve_table     	= bits,    U08, 	23, 	[5:5], "Table", "Curve"
     pwm7_curve_table   	= bits,    U08, 	23, 	[6:6], "Table", "Curve"
	 pwm8_curve_table     	= bits,    U08, 	23, 	[7:7], "Table", "Curve"	 
     
	 pwm1_root_offsetA  	= scalar,  U16, 	24, 	"", 1, 0,  0, 65535, 0
     pwm1_root_sizeA   		= scalar,  U08, 	26, 	"", 1, 0,  0, 255, 0
     pwm1_root_canidA       = scalar,  U08, 	27, 	"", 1, 0,  0,  15, 0
     pwm1_xaxis_offsetA 	= scalar,  U16, 	28, 	"", 1, 0,  0, 65535, 0	 
     pwm1_xaxis_sizeA   	= scalar,  U08, 	30, 	"", 1, 0,  0, 255, 0
	 pwm1_xaxis_canidA  	= scalar,  U08, 	31, 	"", 1, 0,  0,  15, 0

     pwm2_root_offsetA  	= scalar,  U16, 	32, 	"", 1, 0,  0, 65535, 0
     pwm2_root_sizeA    	= scalar,  U08, 	34, 	"", 1, 0,  0, 255, 0
     pwm2_root_canidA    	= scalar,  U08, 	35, 	"", 1, 0,  0,  15, 0
     pwm2_xaxis_offsetA 	= scalar,  U16, 	36, 	"", 1, 0,  0, 65535, 0
     pwm2_xaxis_sizeA   	= scalar,  U08, 	38, 	"", 1, 0,  0, 255, 0
     pwm2_xaxis_canidA  	= scalar,  U08, 	39, 	"", 1, 0,  0,  15, 0
	 
     port1_pin_type  		= bits,    U08,     40,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port2_pin_type  		= bits,    U08,     40,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port3_pin_type  		= bits,    U08,     41,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port4_pin_type  		= bits,    U08,     41,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port5_pin_type  		= bits,    U08,     42,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port6_pin_type  		= bits,    U08,     42,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port7_pin_type  		= bits,    U08,     43,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port8_pin_type  		= bits,    U08,     43,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8" 
     port9_pin_type  		= bits,    U08,     44,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port10_pin_type  		= bits,    U08,     44,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port11_pin_type  		= bits,    U08,     45,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port12_pin_type  		= bits,    U08,     45,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port13_pin_type  		= bits,    U08,     46,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port14_pin_type  		= bits,    U08,     46,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port15_pin_type  		= bits,    U08,     47,     [0:3], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 port16_pin_type  		= bits,    U08,     47,     [4:7], "Digital", "PWM1", "PWM2", "PWM3", "PWM4", "PWM5", "PWM6", "PWM7", "PWM8"
	 
	 2unused48   			= scalar,  U08,     48,     "RPM",      100.0,  0.0,   100,     25500,    0
	 2unused49   			= scalar,  U08,     49,     "RPM",      100.0,  0.0,   100,     25500,    0
	
     pwm1_xaxis_tableA    	= array,   S16,     50,     [8],   "", { getChannelScaleByOffset(pwm1_xaxis_canidA,pwm1_xaxis_offsetA) } , { getChannelTranslateByOffset(pwm1_xaxis_canidA,pwm1_xaxis_offsetA) }, { getChannelMinByOffset(pwm1_xaxis_canidA,pwm1_xaxis_offsetA) }, { getChannelMaxByOffset(pwm1_xaxis_canidA,pwm1_xaxis_offsetA) }, { getChannelDigitsByOffset(pwm1_xaxis_canidA,pwm1_xaxis_offsetA) }
     pwm1_root_tableA     	= array,   S16,     66,     [8],   "", { getChannelScaleByOffset(pwm1_root_canidA,pwm1_root_offsetA) } , { getChannelTranslateByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelMinByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelMaxByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelDigitsByOffset(pwm1_root_canidA,pwm1_root_offsetA) }
     pwm1_xaxis_curveA    	= array,   S16,     50,     [16],  "", { getChannelScaleByOffset(pwm1_root_canidA,pwm1_root_offsetA) } , { getChannelTranslateByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelMinByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelMaxByOffset(pwm1_root_canidA,pwm1_root_offsetA) }, { getChannelDigitsByOffset(pwm1_root_canidA,pwm1_root_offsetA) }

     pwm2_xaxis_tableA    	= array,   S16,     82,     [8],   "", { getChannelScaleByOffset(pwm2_xaxis_canidA,pwm2_xaxis_offsetA) } , { getChannelTranslateByOffset(pwm2_xaxis_canidA,pwm2_xaxis_offsetA) }, { getChannelMinByOffset(pwm2_xaxis_canidA,pwm2_xaxis_offsetA) }, { getChannelMaxByOffset(pwm2_xaxis_canidA,pwm2_xaxis_offsetA) }, { getChannelDigitsByOffset(pwm2_xaxis_canidA,pwm2_xaxis_offsetA) }
     pwm2_root_tableA     	= array,   S16,     98,     [8],   "", { getChannelScaleByOffset(pwm2_root_canidA,pwm2_root_offsetA) } , { getChannelTranslateByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelMinByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelMaxByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelDigitsByOffset(pwm2_root_canidA,pwm2_root_offsetA) }
     pwm2_xaxis_curveA    	= array,   S16,     82,     [16],  "", { getChannelScaleByOffset(pwm2_root_canidA,pwm2_root_offsetA) } , { getChannelTranslateByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelMinByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelMaxByOffset(pwm2_root_canidA,pwm2_root_offsetA) }, { getChannelDigitsByOffset(pwm2_root_canidA,pwm2_root_offsetA) }

     pwm1_duty_tableA     	= array,   U08,     114,    [8x8], "%", 0.392, 0.000, 0, 100, 1
     pwm1_duty_yaxisA    	= array,   U08,     114,    [16],  "%", 0.392, 0.000, 0, 100, 1
     duty10_yaxisA   		= array,   U16,     114,    [16],  "%", 0.09765625, 0.000, 0, 100, 1
     duty12_yaxisA   		= array,   U16,     114,    [16],  "%", 0.0244140625, 0.000, 0, 100, 2

	 pwm2_duty_tableA     	= array,   U08,     278,    [8x8], "%", 0.392, 0.000, 0, 100, 1
     pwm2_duty_yaxisA    	= array,   U08,     278,    [16],  "%", 0.392, 0.000, 0, 100, 1
     pwm2_duty10_yaxisA     = array,   U16,     278,    [16],  "%", 0.09765625, 0.000, 0, 100, 1
     pwm2_duty12_yaxisA   	= array,   U16,     278,    [16],  "%", 0.0244140625, 0.000, 0, 100, 2
	 
	 2unused442   		= scalar, 	U08,   442,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused23   		= scalar, 	U08,   443,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused24   		= scalar, 	U08,   444,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused25   		= scalar, 	U08,   445,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused26   		= scalar, 	U08,   446,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused27   		= scalar, 	U08,   447,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused28   		= scalar, 	U08,   448,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused29   		= scalar, 	U08,   449,        "RPM",      100.0,       0.0,   100,     25500,    0
	;2unused30   		= scalar, 	U08,   450,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused131   		= scalar, 	U08,   451,        "RPM",      100.0,  0.0,   100,     25500,    0
   ; 2unused32   		= scalar, 	U08,   452,        "RPM",      100.0,  0.0,   100,     25500,    0
   ; 2unused33   		= scalar,	U08,   453,        "RPM",      100.0,  0.0,   100,     25500,    0	 
;	 2unused34   		= scalar, 	U08,   454,        "RPM",      100.0,  0.0,   100,     25500,    0
 ;   2unused35   = scalar, U08,      455,        "RPM",      100.0,  0.0,   100,     25500,    0
  ;  2unused36   = scalar, U08,      456,        "RPM",      100.0,  0.0,   100,     25500,    0
  ;  2unused37   = scalar, U08,      457,        "RPM",      100.0,  0.0,   100,     25500,    0
  ;  2unused38   = scalar, U08,      458,        "RPM",      100.0,  0.0,   100,     25500,    0
  ;  2unused39   = scalar, U08,      458,        "RPM",      100.0,  0.0,   100,     25500,    0
	;2unused40   = scalar, U08,      460,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused41   = scalar, U08,      461,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused42   = scalar, U08,      462,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused43   = scalar, U08,      463,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused44   = scalar, U08,      464,        "RPM",      100.0,  0.0,   100,     25500,    0
    ;2unused45   = scalar, U08,      465,        "RPM",      100.0,  0.0,   100,     25500,    0
	;2unused46   = scalar, U08,      466,        "RPM",      100.0,  0.0,   100,     25500,    0
	;2unused47   = scalar, U08,      467,        "RPM",      100.0,  0.0,   100,     25500,    0

	; 2unused50   = scalar, U08,      468,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused51   = scalar, U08,      469,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused52   = scalar, U08,      470,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused53   = scalar, U08,      471,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused54   = scalar, U08,      472,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused55   = scalar, U08,      473,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused56   = scalar, U08,      474,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused57   = scalar, U08,      475,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused58   = scalar, U08,      476,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused59   = scalar, U08,      477,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused60   = scalar, U08,      478,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused61   = scalar, U08,      479,        "RPM",      100.0,  0.0,   100,     25500,    0
    ; 2unused62   = scalar, U08,      480,        "RPM",      100.0,  0.0,   100,     25500,    0
	; 2unused63   = scalar, U08,      481,        "RPM",      100.0,  0.0,   100,     25500,    0
	 
	  ;Page 3 is spare
page = 3
	 sparep3	  = array,  U08,     0,		    [  384],"", 1, 0, 0, 1, 0, noSizeMutation	;------------------------------------------------------------------------------------------------------------------
	 ;Page 3 is spare
	 
page = 4
   ;  name            = class,    type,   offset,      shape,  units,     scale, translate,    lo,      hi,      digits
  
      ; Programmable output port settings
     port_Enabled      	= array ,  U08,    0,    	[    32], "on/off",   1.00000,   0.00000,   0.00,    1.00,     0 ; * (  32 bytes)
;1 if enabled 0 if not enabled
     port_Condition1    = array ,  U08,    32,    	[  32x2], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * ( 64 bytes)
;<60 =61 >62 &38    
	 port_Condition2    = array ,  U08,    96,    	[  32], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * ( 32 bytes)
;same as above conditions	
     port_InitValue    	= array ,  U08,    128,    	[    32], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * (  32 bytes)
;1 on 0 off
     port_PortValue    	= array ,  U08,    160,    	[    32], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * (  32 bytes)
;1 if active high 0 if active low
     port_OutSize      	= array ,  U08,    192,    	[  32x2], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * ( 64 bytes)
;unsure of purpose but must be present
     port_OutOffset    	= array ,  U16,    256,    	[  32x2], "",         1.00000,   0.00000,   0.00, 32767.0,     0 ; * ( 128 bytes)
;port offset refers to the offset value from the output channels
     port_Threshold    	= array ,  S16,    384,    	[  32x2], "",         1.00000,   0.00000,-32768.0,32767.0,     0 ; * ( 128 bytes)
;threshhold value for on/off
     port_Hysteresis   	= array ,  S16,    512,    	[  32x2], "",         1.00000,   0.00000,-32768.0,32767.0,     0 ; * ( 128 bytes)
;hysteresis value for on/off
	 port_CanId	   		= array ,  U08,    640,    	[  32x2], "",         1.00000,   0.00000,   0.00,  255.00,     0 ; * ( 64 bytes)
	  
     port1sel       	= bits,    U08,    704,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port2sel       	= bits,    U08,    705,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port3sel       	= bits,    U08,    706,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port4sel       	= bits,    U08,    707,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port5sel       	= bits,    U08,    708,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port6sel       	= bits,    U08,    709,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port7sel       	= bits,    U08,    710,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port8sel       	= bits,    U08,    711,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port9sel       	= bits,    U08,    712,      [0:3], "PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port10sel      	= bits,    U08,    713,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port11sel      	= bits,    U08,    714,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port12sel      	= bits,    U08,    715,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port13sel      	= bits,    U08,    716,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port14sel      	= bits,    U08,    717,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port15sel      	= bits,    U08,    718,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"
     port16sel      	= bits,    U08,    719,      [0:3],"PA0","PA1","PA2","PA3","PA4","PA5","PA6","PA7","PB0","PB1","PB2","PB3","PB4","PB5","PB6","PB7"

	 can1sel	  		= bits,   U16,   720, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
	 can2sel	  		= bits,   U16,   722, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can3sel	  		= bits,   U16,   724, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can4sel	  		= bits,   U16,   726, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can5sel	  		= bits,   U16,   728, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can6sel	  		= bits,   U16,   730, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can7sel	  		= bits,   U16,   732, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	
     can8sel	  		= bits,   U16,   734, 	[0:10], "0x200", "0x201", "0x202", "0x203", "0x204", "0x205", "0x206", "0x207", "0x208", "0x209", "0x20A", "0x20B", "0x20C", "0x20D", "0x20E", "0x20F"	

	 data_from_byte1	= bits,	  U08,  736,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte2	= bits,	  U08,  737,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte3	= bits,	  U08,  738,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte4	= bits,	  U08,  739,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte5	= bits,	  U08,  740,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte6	= bits,	  U08,  741,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte7	= bits,	  U08,  742,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	 data_from_byte8	= bits,	  U08,  743,    [0:2], "", "1", "2", "3", "4", "5", "INVALID", "INVALID"
	  
;------------------------------------------------------------------------------------------------------------------	
	  ;Page 5 is page 3 of the obd / eobd mapping for ecu output stream to obd pid's
page = 5
   ;  name            = class,  type,   offset,      shape,   units,    scale, translate,    lo,      hi, digits      
   ;open-loop PWM. all arrays
     pwm_opt_on_1      = bits, U08, 0, [0:0], "Off", "On"
     pwm_opt_freq_1    = bits, U08, 0, [1:4], "On-Off", "Variable Freq", "250Hz", "225Hz", "200Hz", "175Hz", "150Hz", "125Hz", "100Hz", "78Hz", "39Hz", "26Hz", "19.5Hz", "15.6Hz", "13Hz", "11.1Hz"
     pwm_opt_load_1    = bits, U08, 0, [5:7], "RPM", "MAP", "% baro", "TPS", "MAFload", "CLT", "BattV", "MAT" ; ITB hidden
     pwm_opt2_1        = bits, U08, 1, [0:4], "INVALID", "PA0", "PA1", "PA2", "PA3", "PA4", "PA5", "PA6", "PA7", "PB1", "PB2", "PB3", "PB4", "PB5", "PB6", "PB7", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
     pwm_onabove_1     = scalar, U08, 2, "%", 1, 0, 0, 100, 0
     pwm_offbelow_1    = scalar, U08, 3, "%", 1, 0, 0, 100, 0
     pwm_opt_load_1_offset = scalar, U16, 4, "", 1, 0,  0, 65535, 0
     pwm_opt_load_1_size = scalar, U08, 6, "", 1, 0,  0, 255, 0
	 pwm_duties_1   = array,  U08, 7, [6x6], "%", 1, 0, 0, 250, 0
     pwm_yaxis_1    = array,  U08, 43, [12],  "%", 1, 0, 0, 250, 0
	 pwm_opt_curve_1 = bits, U08, 55, [0:0], "Table", "Curve"
;	 pwm_opt_curve_b = bits, U08, 44, [1:1], "Table", "Curve"
  ;  pwm_opt_curve_c = bits, U08, 44, [2:2], "Table", "Curve"
  ;  pwm_opt_curve_d = bits, U08, 44, [3:3], "Table", "Curve"
  ;  pwm_opt_curve_e = bits, U08, 44, [4:4], "Table", "Curve"
  ;  pwm_opt_curve_f = bits, U08, 44, [5:5], "Table", "Curve"
     pwm_rpms_1     = array,  S16, 56,  [6], "rpm",{ pwm_opt_curve_1 == 0 ? 1 : getChannelScaleByOffset(pwm_opt_load_1_offset) } , { pwm_opt_curve_1 == 0 ? 0 : getChannelTranslateByOffset(pwm_opt_load_1_offset) }, { pwm_opt_curve_1 == 0 ? 0 : getChannelMinByOffset(pwm_opt_load_1_offset) }, { pwm_opt_curve_1 == 0 ? rpmhigh : getChannelMaxByOffset(pwm_opt_load_1_offset) }, { pwm_opt_curve_1 == 0 ? 0 : getChannelDigitsByOffset(pwm_opt_load_1_offset) }
     pwm_loadvals_1 = array,  S16, 68, [6], "%", { getChannelScaleByOffset(pwm_opt_load_1_offset) } , { getChannelTranslateByOffset(pwm_opt_load_1_offset) }, { getChannelMinByOffset(pwm_opt_load_1_offset) }, { getChannelMaxByOffset(pwm_opt_load_1_offset) }, { getChannelDigitsByOffset(pwm_opt_load_1_offset) }   
     pwm_xaxis_1    = array,  S16, 56,  [12], "", { getChannelScaleByOffset(pwm_opt_load_1_offset) } , { getChannelTranslateByOffset(pwm_opt_load_1_offset) }, { getChannelMinByOffset(pwm_opt_load_1_offset) }, { getChannelMaxByOffset(pwm_opt_load_1_offset) }, { getChannelDigitsByOffset(pwm_opt_load_1_offset) }

 ;   sparearrayP5      = array ,   U08,   56,    		[ 7], "",  1, 0, 0, 1, 0, noSizeMutation
   
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 ;Page 6 is the list of supported pid
page = 6
     supportedM1PID      	= array ,   U08,   0,    		[   255], "",  1, 0, 0, 1, 0, noSizeMutation
	 supportedM1PID_canid    = array ,   U08,   254,    		[   255], "",  1, 0, 0, 1, 0, noSizeMutation
  
page = 7
	 ECUdatastream	  = array,  U08,     0,		    [  255],"", 1, 0, 0, 1, 0, noSizeMutation
  
	;Page 7 is the 
;page = 7
   ;  name            = class,  type,   offset,      shape,   units,    scale, translate,    lo,      hi, digits
;    5unused00   = scalar, U08,      0,        "RPM",      100.0,  0.0,   100,     25500,    0
   ;--------------------------------------------------

[ConstantsExtensions]
;    requiresPowerCycle = nCylinders
;    requiresPowerCycle = pinLayout
     defaultValue = rpmhigh, 9000
  ;  defaultValue = rpmwarn, 3000
  ;  defaultValue = rpmdang, 5000
  ;  defaultValue = loadhigh, 400
  ;  defaultValue = wue_lpg, "No"
  ;  defaultValue = vehigh, 255
;    defaultValue = PID_sel_0, 0
;    defaultValue = PID_sel_1, 0
;    defaultValue = PID_sel_2,  0
;    defaultValue = mapMax,  260

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ; 
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ; 
   ;----------------------------------------------------------------------------       
      
    menuDialog = main
		menu = "T&ools"
;     		subMenu = mapCal,       "Calibrate MAP"
;			subMenu = battcalib,       "Calibrate Battery Voltage"
;			subMenu = std_separator    ;----------------------------------------------
;			subMenu = flash_unlock, "Un/Lock calibrations"
;      		subMenu = std_gentherm, "Calibrate T&hermistor Tables", 0 ;, {flashlock}
;      		subMenu = std_geno2,    "Calibrate &AFR Table", 0;, {flashlock}
		
		menu = "Help"
        ;	subMenu = helpGeneral,     "Speeduino Gateway Help"

	menuDialog = main
		menu = "&Basic Configuration"
			subMenu = basic_config, "Basic Setup"
			subMenu = canparams, "Basic CAN Config"

	;		subMenu = iopinlist1, "iopinlist"
	;		subMenu = pinusage1, "pinusage"
	;		subMenu = limitsettings, "gauge and table limits"
	;		{CAN_COMMANDS}
		
	menuDialog = main
		menu = "Extended Control"
         
	;		subMenu = edit_port_setup, "Programmable On/Off Outputs"
			subMenu = can_port_selection, "CanBus Input Selection"
	;		{CAN_COMMANDS}
	
	menuDialog = main			
		menu = "Programmable Outputs"
			subMenu = port_selection, "Programmable On/Off Outputs Selection"			
			subMenu = std_separator			
			subMenu = pwm1_config, "PWM1 output Configuration", 0, {port1_pin_type == 1 || port2_pin_type == 1 || port3_pin_type == 1 || port4_pin_type == 1 || port5_pin_type == 1 || port6_pin_type == 1 || port7_pin_type == 1 || port8_pin_type == 1} || {port9_pin_type == 1 || port10_pin_type == 1 || port11_pin_type == 1 || port12_pin_type == 1 || port13_pin_type == 1 || port14_pin_type == 1 || port15_pin_type == 1 || port16_pin_type == 1}
			subMenu = pwm2_config, "PWM2 output Configuration", 1, {port1_pin_type == 2 || port2_pin_type == 2 || port3_pin_type == 2 || port4_pin_type == 2 || port5_pin_type == 2 || port6_pin_type == 2 || port7_pin_type == 2 || port8_pin_type == 2} || {port9_pin_type == 2 || port10_pin_type == 2 || port11_pin_type == 2 || port12_pin_type == 2 || port13_pin_type == 2 || port14_pin_type == 2 || port15_pin_type == 2 || port16_pin_type == 2}
			subMenu = pwm3_config, "PWM3 output Configuration", 2, {port1_pin_type == 3 || port2_pin_type == 3 || port3_pin_type == 3 || port4_pin_type == 3 || port5_pin_type == 3 || port6_pin_type == 3 || port7_pin_type == 3 || port8_pin_type == 3} || {port9_pin_type == 3 || port10_pin_type == 3 || port11_pin_type == 3 || port12_pin_type == 3 || port13_pin_type == 3 || port14_pin_type == 3 || port15_pin_type == 3 || port16_pin_type == 3}
			subMenu = pwm4_config, "PWM4 output Configuration", 3, {port1_pin_type == 4 || port2_pin_type == 4 || port3_pin_type == 4 || port4_pin_type == 4 || port5_pin_type == 4 || port6_pin_type == 4 || port7_pin_type == 4 || port8_pin_type == 4} || {port9_pin_type == 4 || port10_pin_type == 4 || port11_pin_type == 4 || port12_pin_type == 4 || port13_pin_type == 4 || port14_pin_type == 4 || port15_pin_type == 4 || port16_pin_type == 4}
			subMenu = pwm5_config, "PWM5 output Configuration", 4, {port1_pin_type == 5 || port2_pin_type == 5 || port3_pin_type == 5 || port4_pin_type == 5 || port5_pin_type == 5 || port6_pin_type == 5 || port7_pin_type == 5 || port8_pin_type == 5} || {port9_pin_type == 5 || port10_pin_type == 5 || port11_pin_type == 5 || port12_pin_type == 5 || port13_pin_type == 5 || port14_pin_type == 5 || port15_pin_type == 5 || port16_pin_type == 5}
			subMenu = pwm6_config, "PWM6 output Configuration", 5, {port1_pin_type == 6 || port2_pin_type == 6 || port3_pin_type == 6 || port4_pin_type == 6 || port5_pin_type == 6 || port6_pin_type == 6 || port7_pin_type == 6 || port8_pin_type == 6} || {port9_pin_type == 6 || port10_pin_type == 6 || port11_pin_type == 6 || port12_pin_type == 6 || port13_pin_type == 6 || port14_pin_type == 6 || port15_pin_type == 6 || port16_pin_type == 6}
			subMenu = pwm7_config, "PWM7 output Configuration", 6, {port1_pin_type == 7 || port2_pin_type == 7 || port3_pin_type == 7 || port4_pin_type == 7 || port5_pin_type == 7 || port6_pin_type == 7 || port7_pin_type == 7 || port8_pin_type == 7} || {port9_pin_type == 7 || port10_pin_type == 7 || port11_pin_type == 7 || port12_pin_type == 7 || port13_pin_type == 7 || port14_pin_type == 7 || port15_pin_type == 7 || port16_pin_type == 7}
			subMenu = pwm8_config, "PWM8 output Configuration", 7, {port1_pin_type == 8 || port2_pin_type == 8 || port3_pin_type == 8 || port4_pin_type == 8 || port5_pin_type == 8 || port6_pin_type == 8 || port7_pin_type == 8 || port8_pin_type == 8} || {port9_pin_type == 8 || port10_pin_type == 8 || port11_pin_type == 8 || port12_pin_type == 8 || port13_pin_type == 8 || port14_pin_type == 8 || port15_pin_type == 8 || port16_pin_type == 8}			
			subMenu = std_separator
			subMenu = universal_io, "universal io"
	;-------------------------------------------------------------------------------

[SettingContextHelp]
; constantName = "Help Text"
; tool tips tooltips
;Ensure all settings are defined as some Speeduino type device, words shipped with TS are not applicable.
		gpio_canid = "the CAN ID of the GPIO"
		ECU_canid = "The CAN ID of the Speeduino ECU"
		
[UserDefined]
; Enhanced TunerStudio dialogs can be defined here
; MegaTune will over look this section
; These dialogs will over-ride those in the UserDefined Section
; User defined are loaded first, then if one by the same name is defined here,
; it will replace the MegaTune definition

; dialog = name,   Title, Layout
;
; valid options for layout are xAxis, yAxis, border
; for an xAxis, each field added will be added from right to left
; A yAxis layout will add fields from top to bottom
; A border layout will expect an additional constraint to determine placement
; valid border constraints are north, South, East, West, Center
; all 5 do not need to be filled.

; The field name can be either a constant reference, or a reference to another 
; dialog which will be added.
; dialogs can be nested and can be mixed with fields
        
	dialog = basic_config, "Basic Configuration"
		field = "Board Layout", pinLayout

		
	dialog = canwest, ""
		field = "Gpio TS CAN ID",  gpio_canid
		field = "Gpio True CAN ID", gpio_true_canid
		field = "Gpio OBD CAN ID", gpio_obd_canid
		field = "Gpio True CAN Broadcast", gpio_true_can_bcast
		field = "Gpio Broadcast1 True CAN ID", gpio_Bcast1_true_canid,	{gpio_true_can_bcast != 0}

    dialog = caneast, ""
	  	field = "ECU TS can ID",ECU_canid
		field = "ECU True CAN ID",ECU_true_canid
		field = "ECU OBD CAN ID", ECU_obd_canid
		   

    dialog = can_top, "", xAxis
        panel = canwest
        panel = caneast
		
    dialog = canparams,  "CAN Parameters", border
        ; topicHelp = ""
       panel = can_top, North
       ;panel = canadcs, South

    dialog = canbroadcast,  "CAN Broadcasting"

;--------------------------------------------------------------------------------------------	
			
	dialog = obd_devices_activetop_left, "" yAxis
		field = "TS CANID 0", can_device00
		field = "TS CANID 1", can_device01
		field = "TS CANID 2", can_device02
		field = "TS CANID 3", can_device03
		field = "TS CANID 4", can_device04
		field = "TS CANID 5", can_device05
		field = "TS CANID 6", can_device06
		field = "TS CANID 7", can_device07
		field = "TS CANID 8", can_device08
		field = "TS CANID 9", can_device09
		field = "TS CANID 10", can_device10
		field = "TS CANID 11", can_device11
		field = "TS CANID 12", can_device12
		field = "TS CANID 13", can_device13
		field = "TS CANID 14", can_device14
		field = "TS CANID 15", can_device15		

	dialog = obd_devices_activetop_right, "  CAN Broadcast Active" yAxis
		field = "", can_device00_Bcast
		field = "", can_device01_Bcast
		field = "", can_device02_Bcast
		field = "", can_device03_Bcast
		field = "", can_device04_Bcast
		field = "", can_device05_Bcast
		field = "", can_device06_Bcast
		field = "", can_device07_Bcast
		field = "", can_device08_Bcast
		field = "", can_device09_Bcast
		field = "", can_device10_Bcast
		field = "", can_device11_Bcast
		field = "", can_device12_Bcast
		field = "", can_device13_Bcast
		field = "", can_device14_Bcast
		field = "", can_device15_Bcast
			
	dialog = obd_devices_activebot, "", xAxis
		field = "OBD/EOBD addresses 0x** are either 0x00 for Data capture "
		field = "or 0x07 for Fault code"
	
	dialog = obd_devices, "TS can id to CAN Devices Activation", xAxis  
		;topicHelp = "file://$getProjectsDirPath()/gate buf 3/docs/Speeduino_data_mapping.txt"
		panel = obd_devices_activetop_left
		panel = obd_devices_activetop_right
		panel = obd_devices_activebot
;-------------------------------------------------------------------------------
	
	dialog = obd_devicestop1, "", yAxis
		field = "", obd_address00, {can_device00}
		field = "", obd_address01, {can_device01}
		field = "", obd_address02, {can_device02}
		field = "", obd_address03, {can_device03}
		field = "", obd_address04, {can_device04}
		field = "", obd_address05, {can_device05}
		field = "", obd_address06, {can_device06}
		field = "", obd_address07, {can_device07}
		field = "", obd_address08, {can_device08}
		field = "", obd_address09, {can_device09}
		field = "", obd_address10, {can_device10}
		field = "", obd_address11, {can_device11}
		field = "", obd_address12, {can_device12}
		field = "", obd_address13, {can_device13}
		field = "", obd_address14, {can_device14}
		field = "", obd_address15, {can_device15}
	
	dialog = obd_devicesbot1, "", xAxis
		;panel = "bottom txt"
	
	dialog = Ts_obd1, "TS to CAN PID mapping for TS id 1", yAxis
		;topicHelp = ""
		panel = obd_devicestop1, North
		panel = obd_devicesbot1, South
		
;-------------------------------------------------------------------------------------------------------------------
		
   ;  field = "PWM Channel 6 select", port6sel, port_Enabled[5]
   ;  field = "PWM Channel 7 select", port7sel, port_Enabled[6]
   ;  field = "PWM Channel 8 select", port8sel, port_Enabled[7]
;	 field = "PWM Channel 9 select", port1sel, port_Enabled[8]
;     field = "PWM Channel 10 select", port2sel, port_Enabled[9]
;     field = "PWM Channel 11 select", port3sel, port_Enabled[10]
;     field = "PWM Channel 12 select", port4sel, port_Enabled[11]
;     field = "PWM Channel 13 select", port5sel, port_Enabled[12]
 ;    field = "PWM Channel 14 select", port6sel, port_Enabled[13]
  ;   field = "PWm Channel 15 select", port7sel, port_Enabled[14]
  ;   field = "PWm Channel 16 select", port8sel, port_Enabled[15]
	 
;---------------------------------------------------------------------------------------------------------------------	 
	dialog = can_port_selectionW, "CanBus Input Selection"
		field = "Channel 1 select", can1sel 
		field = "Channel 2 select", can2sel 
		field = "Channel 3 select", can3sel 
		field = "Channel 4 select", can4sel 
		field = "Channel 5 select", can5sel 
		field = "Channel 6 select", can6sel 
		field = "Channel 7 select", can7sel 
		field = "Channel 8 select", can8sel

	dialog = can_port_selectionE, "data from byte"
		field = "", data_from_byte1
		field = "", data_from_byte2
		field = "", data_from_byte3
		field = "", data_from_byte4
		field = "", data_from_byte5
		field = "", data_from_byte6
		field = "", data_from_byte7
		field = "", data_from_byte8
		
	dialog = can_port_selection	,""	,xAxis
		panel = can_port_selectionW, West
		panel = can_port_selectionE, East
			
;--------------------------------------------------------------------------------------------------			

	dialog = pwm_out_left_1, ""
        field = "Enable PWM Output 1", pwm_opt_on_1
        field = "Output Port/Pin", pwm_opt2_1, {pwm_opt_on_1}
        field = "Frequency / On-Off", pwm_opt_freq_1, {pwm_opt_on_1}
        field = "On Above Duty", pwm_onabove_1, {pwm_opt_on_1 && (pwm_opt_freq_1 == 0)}
        field = "Off Below Duty", pwm_offbelow_1, {pwm_opt_on_1 && (pwm_opt_freq_1 == 0)}
	
        channelSelector= "Load Axis", pwm_opt_load_1_offset, pwm_opt_load_1_size, {pwm_opt_on_1}
        field = "Load is Y axis on table, X axis on curve"
        field = "Table or Curve", pwm_opt_curve_1, {pwm_opt_on_1}
     ;   field = "CLT/MAT Units", sensor_temp, {0}


    dialog = pwm_curve_graph1, "", card
        panel = pwm_duties_Tbl_1, Center, {pwm_opt_on_1 && (pwm_opt_curve_1 == 0)}
        panel = pwm_curve_1, Center, {pwm_opt_on_1 && pwm_opt_curve_1}

    dialog = pwm_out_1, "PWM Output 1", border
     ;    topicHelp = ""
        panel = pwm_out_left_1, West
        panel = pwm_curve_graph1, Center		
	;------------------------------------------------------------------------------------------------------------------
	dialog = pins_active_useage,"List of IO Active pins"
		displayOnlyField = "Programmable On/Off Output: Channel 1",    port1sel, {port_Enabled[0]}
		displayOnlyField = "Programmable On/Off Output: Channel 2",    port2sel, {port_Enabled[1]}
		displayOnlyField = "Programmable On/Off Output: Channel 3",    port3sel, {port_Enabled[2]}
		displayOnlyField = "Programmable On/Off Output: Channel 4",    port4sel, {port_Enabled[3]}
		displayOnlyField = "Programmable On/Off Output: Channel 5",    port5sel, {port_Enabled[4]}
		displayOnlyField = "Programmable On/Off Output: Channel 6",    port6sel, {port_Enabled[5]}
		displayOnlyField = "Programmable On/Off Output: Channel 7",    port7sel, {port_Enabled[6]}
		displayOnlyField = "Programmable On/Off Output: Channel 8",    port8sel, {port_Enabled[7]}

	;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	;pwm1 configuration 
	
	dialog = pwm1_config_settings, ""
		field = ""
		canDeviceSelector = "Location of Root data", pwm1_root_canidA
		channelSelector= "Root axis", pwm1_root_offsetA, pwm1_root_sizeA, pwm1_root_canidA
		canDeviceSelector = "Location of x axis data", pwm1_xaxis_canidA, {pwm1_curve_table == 0}
		channelSelector= "Table x axis", pwm1_xaxis_offsetA, pwm1_xaxis_sizeA, pwm1_xaxis_canidA, {pwm1_curve_table == 0}
		field = "Table or Curve", pwm1_curve_table
		field = "Root Data is Y axis on table, X axis on curve"

    dialog = pwm1_config_curve_table, "", card
		panel = pwm1_dutycycle_tableA, Center, {pwm1_curve_table == 0}
		panel = pwm1_dutycycle_curveA, Center, {pwm1_curve_table}

      ;panel = dutycycle10_curveA, Center, {gen_pin_enable && pwm1_curve_table && (((pwm1_port_pin < 2) && (((timer_source2 == 2) && (port_pin_type == 1) && (timer2_pwm == 1)) || ((timer_source2 < 2) && (timer2_pwm == 1)))) || ((pwm1_port_pin > 1) && (((timer_source1 == 2) && (port_pin_type == 1) && (timer1_pwm == 1)) || ((timer_source1 < 2) && (timer1_pwm == 1)))))}
      ;panel = dutycycle12_curveA, Center, {gen_pin_enable && pwm1_curve_table && (((pwm1_port_pin < 2) && (((timer_source2 == 2) && (port_pin_type == 1) && (timer2_pwm == 2)) || ((timer_source2 < 2) && (timer2_pwm == 2)))) || ((pwm1_port_pin > 1) && (((timer_source1 == 2) && (port_pin_type == 1) && (timer1_pwm == 2)) || ((timer_source1 < 2) && (timer1_pwm == 2)))))}

    dialog = pwm1_config, "PWM1 configuration", border
		panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;------------------------------------------------------------------------------------------------------------------
    ;pwm2 configuration
    
	dialog = pwm2_config_settings, ""
		field = ""
		canDeviceSelector = "Location of Root data", pwm2_root_canidA
		channelSelector= "Root axis", pwm2_root_offsetA, pwm2_root_sizeA, pwm2_root_canidA
		canDeviceSelector = "Location of x axis data", pwm2_xaxis_canidA, {pwm2_curve_table == 0}
		channelSelector= "Table x axis", pwm2_xaxis_offsetA, pwm2_xaxis_sizeA, pwm2_xaxis_canidA, {pwm2_curve_table == 0}
		field = "Table or Curve", pwm2_curve_table
		field = "Root Data is Y axis on table, X axis on curve"

    dialog = pwm2_config_curve_table, "", card
		panel = pwm2_dutycycle_tableA, Center, {pwm2_curve_table == 0}
		panel = pwm2_dutycycle_curveA, Center, {pwm2_curve_table}

      ;panel = dutycycle10_curveA, Center, {gen_pin_enable && pwm1_curve_table && (((pwm1_port_pin < 2) && (((timer_source2 == 2) && (port_pin_type == 1) && (timer2_pwm == 1)) || ((timer_source2 < 2) && (timer2_pwm == 1)))) || ((pwm1_port_pin > 1) && (((timer_source1 == 2) && (port_pin_type == 1) && (timer1_pwm == 1)) || ((timer_source1 < 2) && (timer1_pwm == 1)))))}
      ;panel = dutycycle12_curveA, Center, {gen_pin_enable && pwm1_curve_table && (((pwm1_port_pin < 2) && (((timer_source2 == 2) && (port_pin_type == 1) && (timer2_pwm == 2)) || ((timer_source2 < 2) && (timer2_pwm == 2)))) || ((pwm1_port_pin > 1) && (((timer_source1 == 2) && (port_pin_type == 1) && (timer1_pwm == 2)) || ((timer_source1 < 2) && (timer1_pwm == 2)))))}

	dialog = pwm2_config, "PWM2 configuration", border
	    panel = pwm2_config_settings, Center
        panel = pwm2_config_curve_table, East

	;-----------------------------------------------------------------------------------------------------------------
	;pwm3 configuration

	dialog = pwm3_config, "PWM3 configuration", border
	     panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;-----------------------------------------------------------------------------------------------------------------  
	;pwm4 configuration

	dialog = pwm4_config, "PWM4 configuration", border
	    panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;-----------------------------------------------------------------------------------------------------------------  
	;pwm5 configuration
	
	dialog = pwm5_config, "PWM5 configuration", border
	    panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;----------------------------------------------------------------------------------------------------------------  
	;pwm6 configuration
	
	dialog = pwm6_config, "PWM6 configuration", border
	    panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;----------------------------------------------------------------------------------------------------------------  
	;pwm7 configuration
	
	dialog = pwm7_config, "PWM7 configuration", border
	    panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
		
	;----------------------------------------------------------------------------------------------------------------  
	;pwm8 configuration
	
	dialog = pwm8_config, "PWM8 configuration", border
	    panel = pwm1_config_settings, Center
		panel = pwm1_config_curve_table, East
	  
	;------------------------------------------------------------------------------------------------------------------ 
	dialog = port_out_type, "output type"
		field = "", port1_pin_type, {port_Enabled[0]}
		field = "", port2_pin_type, {port_Enabled[1]}
		field = "", port3_pin_type, {port_Enabled[2]}
		field = "", port4_pin_type, {port_Enabled[3]}
		field = "", port5_pin_type, {port_Enabled[4]}
		field = "", port6_pin_type, {port_Enabled[5]}
		field = "", port7_pin_type, {port_Enabled[6]}
		field = "", port8_pin_type, {port_Enabled[7]}
		field = "", port9_pin_type, {port_Enabled[8]}
		field = "", port10_pin_type, {port_Enabled[9]}
		field = "", port11_pin_type, {port_Enabled[10]}
		field = "", port12_pin_type, {port_Enabled[11]}
		field = "", port13_pin_type, {port_Enabled[12]}
		field = "", port14_pin_type, {port_Enabled[13]}
		field = "", port15_pin_type, {port_Enabled[14]}
		field = "", port16_pin_type, {port_Enabled[15]}
		
	dialog = port_selection, "Programmable On/Off Outputs Selection"
		field = "Channel 1 select", port1sel, port_Enabled[0]
		field = "Channel 2 select", port2sel, port_Enabled[1]
		field = "Channel 3 select", port3sel, port_Enabled[2]
		field = "Channel 4 select", port4sel, port_Enabled[3]
		field = "Channel 5 select", port5sel, port_Enabled[4]
		field = "Channel 6 select", port6sel, port_Enabled[5]
		field = "Channel 7 select", port7sel, port_Enabled[6]
		field = "Channel 8 select", port8sel, port_Enabled[7]
		field = "Channel 9 select", port9sel, port_Enabled[8]
		field = "Channel 10 select", port10sel, port_Enabled[9]
		field = "Channel 11 select", port11sel, port_Enabled[10]
		field = "Channel 12 select", port12sel, port_Enabled[11]
		field = "Channel 13 select", port13sel, port_Enabled[12]
		field = "Channel 14 select", port14sel, port_Enabled[13]
		field = "Channel 15 select", port15sel, port_Enabled[14]
		field = "Channel 16 select", port16sel, port_Enabled[15]
	
	dialog = universal_io, "universal IO", border
		panel = port_out_type, East
		panel = port_selection, Center
		panel = edit_port_setup, West
		
	;------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; General help text

    help = helpGeneral, "Speeduino GPIO General Help"
        webHelp = "http://speeduino.com/wiki/index.php/Speeduino"
        text = "For current WIKI documentation, click the Web Help button,"
        text = "or visit http://www.speeduino.com/."
        text = "<br>"
        text = "<br>why not visit our forum http://speeduino.com/forum/"
;------------------------------------------------------------------------------

; -------------------------------------------------------------
; Help down here
[SettingContextHelp]
 
[CurveEditor]
    curve = pwm1_dutycycle_curveA, "PWM 1 curve"
        columnLabel = "Root", ""
        xAxis       = 0, 100, 6
        yAxis       = 0, 100, 7
        xBins       = pwm1_xaxis_curveA, pwm1_root
        yBins       = pwm1_duty_yaxisA
        size        = 300, 240

	    curve = pwm2_dutycycle_curveA, "PWM 2 curve"
        columnLabel = "Root", ""
        xAxis       = 0, 100, 6
        yAxis       = 0, 100, 7
        xBins       = pwm2_xaxis_curveA, pwm2_root
        yBins       = pwm2_duty_yaxisA
        size        = 300, 240
		
  ;   curve = dutycycle10_curveA, "PWM curve A"
  ;      columnLabel = "Load", ""
  ;      xAxis       = 0, 100, 6
  ;      yAxis       = 0, 100, 7
  ;      xBins       = pwm1_xaxis_curveA, pwm1_root
  ;      yBins       = duty10_yaxisA
  ;      size        = 300, 240

   ;  curve = dutycycle12_curveA, "PWM curve A"
   ;     columnLabel = "Load", ""
   ;     xAxis       = 0, 100, 6
   ;     yAxis       = 0, 100, 7
   ;     xBins       = pwm1_xaxis_curveA, pwm1_root
   ;     yBins       = duty12_yaxisA
   ;     size        = 300, 240

    curve = pwm_curve_1, "PWM curve 1"
        columnLabel = "Load", ""
        xAxis       = 0, 100, 6
        yAxis       = 0, 100, 7
        xBins       = pwm_xaxis_1, pwm1_load
        yBins       = pwm_yaxis_1
        size         = 300, 240

    [TableEditor]	 
	;       table_id,    map3d_id,    "title",      page

    table = pwm1_dutycycle_tableA, pwm1_duty_mapA, "PWM 1", 1
        xBins       = pwm1_xaxis_tableA, pwm1_xaxis
        yBins	    = pwm1_root_tableA, pwm1_root
        zBins       = pwm1_duty_tableA
        upDownLabel = "HIGHER", "LOWER"
        gridHeight  = 2.0
        gridOrient  = 250, 0, 340

    table = pwm2_dutycycle_tableA, pwm2_duty_mapA, "PWM 2", 1
        xBins       = pwm2_xaxis_tableA, pwm2_xaxis
        yBins	    = pwm2_root_tableA, pwm2_root
        zBins       = pwm2_duty_tableA
        upDownLabel = "HIGHER", "LOWER"
        gridHeight  = 2.0
        gridOrient  = 250, 0, 340
		
    table = pwm_duties_Tbl_1, pwm_duties_map_1, "PWM Output 1", 11
        xBins       = pwm_rpms_1, rpm
        yBins       = pwm_loadvals_1, pwm1_load
        zBins       = pwm_duties_1
        upDownLabel = "HIGHER", "LOWER"
        gridOrient = 250, 0, 340
	 
[ControllerCommands]
; commandName    = command1, command2, commandn...
; command in standard ini format, a command name can be assigned to 1 to n commands that will be executed in order.
;         This does not include any resultant protocol envelope data, only the response data itself.

; WARNING!! These commands bypass TunerStudio's normal memory synchronization. If these commands
; alter mapped settings (Constant) memory in the controller, TunerStudio will have an out of sync condition 
; and may create error messages.
; It is expected that these commands would not typically alter any ram mapped to a Constant.

;The offsets here must match the actual offsets in 'datax1' and include the 0x200 offset.
cmdStopTestmode = "w\$tsCanId\x07\x02\x87\x00\x05\x30\x39\x00\x00"
cmdEnterTestMode = "w\$tsCanId\x07\x02\x87\x00\x05\x30\x39\x00\x01"
cmddoPIDsearch = "w\$tsCanId\xE0\x01\x00\x00\x00\x01"
;xE0 is set to cmd_button page , then 2 byte offset ,2 byte length and 1 byte data

;----------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------

[PortEditor]
    ; map the arrays and supply the labels.
    ; all arrays are expected to be the same length in the first dimension
    ; thus a [ 7] array will be 7 ports in length and expect 7 labels
    ; The second dimension will drive the number of conditions per array.
    ; thus a [7x2] array will have 2 conditions joined by the conditionRelationship.
    ; a [7x3] will have up to 3 conditions.
    portEditor = edit_port_setup, "Programmable On/Off Outputs"
    ; 1st the array constant, then the labels in the index order.
    enabledPorts = port_Enabled, "Out 1", "Out 2", "Out 3", "Out 4", "Out 5", "Out 6", "Out 7", "Out 8", "Out 9", "Out 10", "Out 11", "Out 12", "Out 13", "Out 14", "Out 15", "Out 16"
	;, "CANout1",  "CANout2", "CANout3", "CANout4", "CANout5", "CANout6", "CANout7", "CANout8", "CANout9", "CANout10", "CANout11", "CANout12", "CANout13", "CANout14", "CANout15", "CANout16"

    ; new CAN id, optional if psCanId is set to a valid array equal in size to outputOffset, it will be in the UI.
    outputCanId  = port_CanId
    outputOffset = port_OutOffset
    outputSize   = port_OutSize
    operators    = port_Condition1, "<", "=", ">", "&" ; the actual ASCII value of the operator will be sent to the controller
    threshold    = port_Threshold
    hysteresis   = port_Hysteresis
    powerOnValue = port_InitValue
    triggerValue = port_PortValue
    ;conditionRelationship = port_Condition2, " ", "|", "&"		;disable this for 1 condition only
    activateOption = extendedDataInSize
    activateOption = filter32BitChannels

	;port_CanID above has no table , the list is populated using the can devices ts detects and is configured to see in project properties tab	
;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ;  Notes on some of the gauges.
   ;
   ;  The accelEnrichGauge is now a composite of both acceleration enrichment
   ;  and deceleration enleanment numbers.  See the definition of the variable
   ;  accDecEnrich in the OutputChannels section.
   ;
   ;  David Hooke contributed the lambda gauge and associated transfer
   ;  function files.
   ;
   ;    "The lambda gauge is the best way (my opinion) to report data from a
   ;     wide band EGO gauge, it standardizes the output irrespective of fuel
   ;     or mix of fuels, so you needn't do any brainwork to know if your 75%
   ;     gasoline and 25% methanol is rich at 10:1 or not.
   ;
   ;    "Use the file WBlambda100AVR.inc, if using a standard ADC (e.g., AVR cpu).
   ;     Use the file WBlambda100MOT.inc, if using a biased ADC (e.g., MOT cpu)."
   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

   ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld

   ; baroADCGauge      = baroADC,       "Barometer ADC",      "",        0,   255,     -1,    -1,  256,  256, 0, 0
   ; mapADCGauge       = mapADC,        "MAP ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   #matADCGauge       = matADC,        "MAT ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   #cltADCGauge       = cltADC,        "CLT ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
;   tpsADCGauge       = tpsADC,        "TPS ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   #batVoltGauge      = batteryVoltage,        "BAT V",              "",        0,   255,     -1,    -1,  256,  256, 0, 0

;   accelEnrichGauge  = accelEnrich,   "Accel Enrich",       "%",      50,   150,     -1,    -1,  999,  999, 0, 0
;   afrGauge          = afr,           "Air:Fuel Ratio",     "",        7,    25,     12,    13,   15,   16, 2, 2
;   afrGauge2         = afr2,          "Air:Fuel Ratio 2",   "",        7,    25,     12,    13,   15,   16, 2, 2
;   dutyCycleGauge    = dutyCycle,     "Duty Cycle",         "%",       0,   100,     -1,    -1,   70,   80, 1, 1
;   egoCorrGauge      = egoCorrection, "EGO Correction",     "%",      50,   150,     90,    99,  101,  110, 0, 0

;   gammaEnrichGauge  = gammaEnrich,   "Gamma Enrichment",   "%",      50,   150,     -1,    -1,  151,  151, 0, 0
;   pulseWidthGauge   = pulseWidth,    "Pulse Width",        "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   tachometer        = rpm,           "Engine Speed",       "RPM",     0,  8000,    300,   600, 3000, 5000, 0, 0
;   throttleGauge     = throttle,      "Throttle Position",  "%TPS",    0,   100,     -1,     1,   90,  100, 0, 0
;   tpsGauge          = tps,           "Throttle Position2", "%TPS",    0,   100,     -1,     1,   90,  100, 0, 0
;   veBucketGauge     = veTuneValue,   "VE Value",           "%",       0,   120,     -1,    -1,  999,  999, 0, 0
;   veGauge           = veCurr,        "VE Current",         "%",       0,   120,     -1,    -1,  999,  999, 0, 0
;   voltMeter         = batteryVoltage,"Battery Voltage",    "volts",   0,    25,      8,     9,   15,   16, 2, 2
;   warmupEnrichGauge = warmupEnrich,  "Warmup Enrichment",  "%",     100,   200,    130,   140,  140,  150, 0, 0

;   gaugeCategory = "Sensor inputs"
;   mapGauge          = map,           "Engine MAP",         "kPa",     0,   255,      0,    20,  200,  245, 0, 0   
;#if CELSIUS
;   cltGauge          = coolant,       "Coolant Temp",       "TEMP", -40,   215,    -15,     0,   95,  105, 0, 0
;   iatGauge          = iat,           "Inlet Air Temp",     "TEMP", -40,   215,    -15,     0,   95,  100, 0, 0
;#else
;   cltGauge          = coolant,       "Coolant Temp",       "TEMP", -40,   215,      0,    30,  200,  220, 0, 0
;   iatGauge          = iat,           "Inlet Air Temp",     "TEMP", -40,   215,      0,    30,  200,  210, 0, 0
;#endif
;   advanceGauge      = advance,       "Spark Advance",      "deg BTDC", 50, -10,      0,     0,    35,    45, 0,
    gaugeCategory = "Analog inputs"
    AnInput1ADCGauge	   = AnInput01,		"Analog 1",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
    AnInput2ADCGauge	   = AnInput02,		"Analog 2",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput3ADCGauge	   = AnInput03,		"Analog 3",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput4ADCGauge	   = AnInput04,		"Analog 4",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput5ADCGauge	   = AnInput05,		"Analog 5",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput6ADCGauge	   = AnInput06,		"Analog 6",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput7ADCGauge	   = AnInput07,		"Analog 7",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0
	AnInput8ADCGauge	   = AnInput08,		"Analog 8",			"",			0,   1024     -1,	-1,		1024, 1024, 0, 0   

    gaugeCategory = "Other"
    clockGauge        = secl,          "Clock",              "Seconds", 0,   255,     10,    10,  245,  245, 0, 0
;   deadGauge         = deadValue,     "---",                "",        0,     1,     -1,    -1,    2,    2, 0, 0   
    loopGauge         = loopsPerSecond,"Main loop speed",    "Loops/S" , 0,  30000,    -1,    500,1800, 4000, 0, 0  
    memoryGauge       = freeRAM,       "Free memory",        "bytes" ,   0,  8000,     -1,    1000,8000, 1000, 0, 0  

;-------------------------------------------------------------------------------

[FrontPage]


   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = clockGauge
   gauge2 = loopGauge
   gauge3 = memoryGauge
;   gauge4 = 
   gauge5 = AnInput1ADCGauge
;   gauge6 = iatGauge
;   gauge7 = cltGauge
;   gauge8 = gammaEnrichGauge
   
   ;----------------------------------------------------------------------------
   ; Indicators
   ;        expr 				        off-label          on-label,		 off-bg, off-fg, on-bg, on-fg

   ;indicator = { ready              }, "Not Ready",	    "Ready",         white,  black,  green, black
  ; indicator = { ready         		 }, "Bridge Not Ready", "Bridge Ready",  white,  black,  green, black

   #if SHOW_INDICATORS
   indicator = { gen_can250          }, "No Can250",    	"can250 Ready",  white, black, green, black
   indicator = { gen_can500          }, "No can500", 		"can500 Ready",  white, black, green, black
   indicator = { can1000             }, "No can1k",    		"can1k Ready",   white, black, green, black
   indicator = { ECUready            }, "ECU Not Ready",    "ECU Ready",     white, black, green, black
;	indicator = { In1Active          }, "in1 off",    		"in1 on",     	 white, black, green, black
;   indicator = { In2Active          }, "in2 off", 			"in2 on",        white, black, green, black
   ;indicator = { mapaccden          }, "MAP Decel", 		"MAP Decel",     white, black, green, black
	#endif
;-------------------------------------------------------------------------------


[RunTime]
;   barHysteresis = 2.5 ; Seconds
;#if CELSIUS
;   coolantBar    = -40,  215
;   matBar        = -40,  215
;#else
;   coolantBar    = -40,  215
;   matBar        = -40,  215
;#endif

;   batteryBar    =   6,   15
;   dutyCycleBar  =   0,  100

;   gammaEBar     =   0,  200
;   mapBar        =   0,  255
;   pulseWidthBar =   0,   25.5
;   rpmBar        =   0, 8000
;   throttleBar   =   0,  100

;   egoCorrBar    =   0,  200
;   baroCorrBar   =   0,  200
;   warmupCorrBar =   0,  200
;   airdenCorrBar =   0,  200
;   veCorrBar     =   0,  200
;   accCorrBar    =   0,  100
	pwm_opt_load_1_offset = psEnabled[16]
;-------------------------------------------------------------------------------

[Tuning]

   font            = "Courier", 14
   spotDepth       =   2 ; 0 = no indicators, 1 = Z only, 2 = XYZ indicators.
   cursorDepth     =   2 ; Same as spot depth.

   ; The four radio buttons on the tuning screen select a "page" of six
   ; gauges.  The gauge numbering is the same as the front page, across
   ; then down.
   ;             1  2
   ;             3  4
   ;             5  6
   ;
   ; gaugeColumns allows you to hide or show gauges in column 2 (i.e.,
   ; gauges 2, 4 and 6).

   gaugeColumns = 2 ; Only 1 or 2 are valid.

   ;----------------------------------------------------------------------------
   ; Notes on tuning screen gauges:
   ;   pageButtons = Labels for radio buttons at bottom of tuning dialog.
   ;
   ;   Gauge 2 previously switched automatically to be tpsGauge when alpha-n
   ;   was enabled, but you need to do it manually now.
   ;----------------------------------------------------------------------------
   ;              Page 1            Page 2             Page 3            Page 4
;   pageButtons  = "&EGO",           "&WUE",            "PW&1",           "PW&2"
;   gauge1       = tachometer,       tachometer,        tachometer,       tachometer
;   gauge2       = mapGauge,         mapGauge,          mapGauge,         mapGauge
;   gauge3       = egoGauge,         egoGauge,          egoGauge,         egoGauge
;   gauge4       = egoCorrGauge,     warmupEnrichGauge, pulseWidthGauge,  pulseWidthGauge
;   gauge5       = veBucketGauge,    veBucketGauge,     veBucketGauge,    veBucketGauge
;   gauge6       = accelEnrichGauge, accelEnrichGauge,  dutyCycleGauge,   dutyCycleGauge

;-------------------------------------------------------------------------------

[OutputChannels]
   ; The number of bytes MegaTune or TunerStudio should expect as a result
   ; of sending the "A" command to Speeduino is determined
   ; by the value of ochBlockSize, so be very careful when
   ; you change it.

   deadValue        = { 0 } ; Convenient unchanging value.

#if CAN_COMMANDS
   ;ochGetCommand    = "a\$tsCanId\x07"
   ochGetCommand = "r\$tsCanId\xB0\x00\x00\x00\x00\x29"	
   ; xB0 is the new equiv to code a
   ; x06 is for a block size of 7 to be sent	
   ; x17 = 23dec
   ; x27 = 39dec
   ; x37 = 55dec
   ;"r\x00\x07\x00\x00\x00\x91"
#else
   ochGetCommand    = "A\x63\x2B"
   ; x63 is a dummy canid of 99 and x17 is the number of bytes to send back
#endif

   ochBlockSize     =  43
    ;ecu init           		= scalar, U08,  0, "bits",   1.000, 0.000
		ready            	= bits,    U08,    0, [0:0]
		gen_can250          = bits,    U08,    0, [1:1]
		gen_can500          = bits,    U08,    0, [2:2]
		can1000           	= bits,    U08,    0, [3:3]
		ECUready        	= bits,    U08,    0, [4:4]
		tpsaccden        	= bits,    U08,    0, [5:5]
		spare1     			= bits,    U08,    0, [6:6]
		spare2     			= bits,    U08,    0, [7:7]
   secl             		= scalar, U08,  1, "sec",    1.000, 0.000
   squirt           		= scalar, U08,  2, "bits",   1.000, 0.000
   loopsPerSecond   		= scalar, S16, 3, "loops",  1.000, 0.000
   freeRAM          		= scalar, S16, 5, "bytes",  1.000, 0.000
    ;OutputPort1         		= scalar, U08,  7, "bits",   1.000, 0.000
		Out1Active         	= bits,    U08,    7, [0:0]
		Out1Good   	        = bits,    U08,    7, [1:1]
		Out1Open     	    = bits,    U08,    7, [2:2]
		Out1Short          	= bits,    U08,    7, [3:3]
		Out1Overload       	= bits,    U08,    7, [4:4]
		Out1Spare1        	= bits,    U08,    7, [5:5]
		Out1Spare2  		= bits,    U08,    7, [6:6]
		Out1Spare3  		= bits,    U08,    7, [7:7]
    ;OutputPort2         		= scalar,  U08,    8, "bits",   1.000, 0.000
		Out2Active         	= bits,    U08,    8, [0:0]
		Out2Good   	        = bits,    U08,    8, [1:1]
		Out2Open     	    = bits,    U08,    8, [2:2]
		Out2Short          	= bits,    U08,    8, [3:3]
		Out2Overload       	= bits,    U08,    8, [4:4]
		Out2Spare1        	= bits,    U08,    8, [5:5]
		Out2Spare2  		= bits,    U08,    8, [6:6]
		Out2Spare3  		= bits,    U08,    8, [7:7]
	;OutputPort3         		= scalar, U08,  9, "bits",   1.000, 0.000
		Out3Active         	= bits,    U08,    9, [0:0]
		Out3Good   	        = bits,    U08,    9, [1:1]
		Out3Open     	    = bits,    U08,    9, [2:2]
		Out3Short          	= bits,    U08,    9, [3:3]
		Out3Overload       	= bits,    U08,    9, [4:4]
		Out3Spare1        	= bits,    U08,    9, [5:5]
		Out3Spare2  		= bits,    U08,    9, [6:6]
		Out3Spare3  		= bits,    U08,    9, [7:7]
	;OutputPort4         		= scalar, U08,  10, "bits",   1.000, 0.000
		Out4Active         	= bits,    U08,    10, [0:0]
		Out4Good   	        = bits,    U08,    10, [1:1]
		Out4Open     	    = bits,    U08,    10, [2:2]
		Out4Short          	= bits,    U08,    10, [3:3]
		Out4Overload       	= bits,    U08,    10, [4:4]
		Out1Spare1        	= bits,    U08,    10, [5:5]
		Out1Spare2  		= bits,    U08,    10, [6:6]
		Out1Spare3  		= bits,    U08,    10, [7:7]
	;OutputPort5         		= scalar, U08,  11, "bits",   1.000, 0.000
		Out5Active         	= bits,    U08,    11, [0:0]
		Out5Good   	        = bits,    U08,    11, [1:1]
		Out5Open     	    = bits,    U08,    11, [2:2]
		Out5Short          	= bits,    U08,    11, [3:3]
		Out5Overload       	= bits,    U08,    11, [4:4]
		Out5Spare1        	= bits,    U08,    11, [5:5]
		Out5Spare2  		= bits,    U08,    11, [6:6]
		Out5Spare3  		= bits,    U08,    11, [7:7]
	;OutputPort6         		= scalar, U08,  12, "bits",   1.000, 0.000
		Out6Active         	= bits,    U08,    12, [0:0]
		Out6Good   	        = bits,    U08,    12, [1:1]
		Out6Open     	    = bits,    U08,    12, [2:2]
		Out6Short          	= bits,    U08,    12, [3:3]
		Out6Overload       	= bits,    U08,    12, [4:4]
		Out6Spare1        	= bits,    U08,    12, [5:5]
		Out6Spare2  		= bits,    U08,    12, [6:6]
		Out6Spare3  		= bits,    U08,    12, [7:7]
	;OutputPort7         		= scalar, U08,  13, "bits",   1.000, 0.000
		Out7Active         	= bits,    U08,    13, [0:0]
		Out7Good   	        = bits,    U08,    13, [1:1]
		Out7Open     	    = bits,    U08,    13, [2:2]
		Out7Short          	= bits,    U08,    13, [3:3]
		Out7Overload       	= bits,    U08,    13, [4:4]
		Out7Spare1        	= bits,    U08,    13, [5:5]
		Out7Spare2  		= bits,    U08,    13, [6:6]
		Out7Spare3  		= bits,    U08,    13, [7:7]
	;OutputPort8         		= scalar, U08,  14, "bits",   1.000, 0.000
		Out8Active         	= bits,    U08,    14, [0:0]
		Out8Good   	        = bits,    U08,    14, [1:1]
		Out8Open     	    = bits,    U08,    14, [2:2]
		Out8Short          	= bits,    U08,    14, [3:3]
		Out8Overload       	= bits,    U08,    14, [4:4]
		Out8Spare1        	= bits,    U08,    14, [5:5]
		Out8Spare2  		= bits,    U08,    14, [6:6]
		Out8Spare3  		= bits,    U08,    14, [7:7]
	;OutputPort9         		= scalar, U08,  15, "bits",   1.000, 0.000
		Out9Active         	= bits,    U08,    15, [0:0]
		Out9Good   	        = bits,    U08,    15, [1:1]
		Out9Open     	    = bits,    U08,    15, [2:2]
		Out9Short          	= bits,    U08,    15, [3:3]
		Out9Overload       	= bits,    U08,    15, [4:4]
		Out9Spare1        	= bits,    U08,    15, [5:5]
		Out9Spare2  		= bits,    U08,    15, [6:6]
		Out9Spare3  		= bits,    U08,    15, [7:7]
	;OutputPort10         		= scalar, U08,  16, "bits",   1.000, 0.000
		Out10Active        	= bits,    U08,    16, [0:0]
		Out10Good   	    = bits,    U08,    16, [1:1]
		Out10Open     	    = bits,    U08,    16, [2:2]
		Out10Short        	= bits,    U08,    16, [3:3]
		Out10Overload      	= bits,    U08,    16, [4:4]
		Out10Spare1        	= bits,    U08,    16, [5:5]
		Out10Spare2  		= bits,    U08,    16, [6:6]
		Out10Spare3  		= bits,    U08,    16, [7:7]
	;OutputPort11         		= scalar, U08,  17, "bits",   1.000, 0.000
		Out11Active        	= bits,    U08,    17, [0:0]
		Out11Good   	    = bits,    U08,    17, [1:1]
		Out11Open     	    = bits,    U08,    17, [2:2]
		Out11Short         	= bits,    U08,    17, [3:3]
		Out11Overload      	= bits,    U08,    17, [4:4]
		Out11Spare1        	= bits,    U08,    17, [5:5]
		Out11Spare2  		= bits,    U08,    17, [6:6]
		Out11Spare3  		= bits,    U08,    17, [7:7]
	;OutputPort12         		= scalar, U08,  18, "bits",   1.000, 0.000
		Out12Active         = bits,    U08,    18, [0:0]
		Out12Good   	    = bits,    U08,    18, [1:1]
		Out12Open     	    = bits,    U08,    18, [2:2]
		Out12Short          = bits,    U08,    18, [3:3]
		Out12Overload       = bits,    U08,    18, [4:4]
		Out12Spare1        	= bits,    U08,    18, [5:5]
		Out12Spare2  		= bits,    U08,    18, [6:6]
		Out12Spare3  		= bits,    U08,    18, [7:7]
	;OutputPort13         		= scalar, U08,  19, "bits",   1.000, 0.000
		Out13Active         = bits,    U08,    19, [0:0]
		Out13Good   	    = bits,    U08,    19, [1:1]
		Out13Open     	    = bits,    U08,    19, [2:2]
		Out13Short          = bits,    U08,    19, [3:3]
		Out13Overload       = bits,    U08,    19, [4:4]
		Out13Spare1        	= bits,    U08,    19, [5:5]
		Out13Spare2  		= bits,    U08,    19, [6:6]
		Out13Spare3  		= bits,    U08,    19, [7:7]
	;OutputPort14         		= scalar, U08,  20, "bits",   1.000, 0.000
		Out14Active         = bits,    U08,    20, [0:0]
		Out14Good   	    = bits,    U08,    20, [1:1]
		Out14Open     	    = bits,    U08,    20, [2:2]
		Out14Short          = bits,    U08,    20, [3:3]
		Out14Overload       = bits,    U08,    20, [4:4]
		Out14Spare1        	= bits,    U08,    20, [5:5]
		Out14Spare2  		= bits,    U08,    20, [6:6]
		Out14Spare3  		= bits,    U08,    20, [7:7]
	;OutputPort15         		= scalar, U08,  21, "bits",   1.000, 0.000
		Out15Active         = bits,    U08,    21, [0:0]
		Out15Good   	    = bits,    U08,    21, [1:1]
		Out15Open     	    = bits,    U08,    21, [2:2]
		Out15Short          = bits,    U08,    21, [3:3]
		Out15Overload       = bits,    U08,    21, [4:4]
		Out15Spare1        	= bits,    U08,    21, [5:5]
		Out15Spare2  		= bits,    U08,    21, [6:6]
		Out15Spare3  		= bits,    U08,    21, [7:7]
	;OutputPort16         		= scalar, U08,  22, "bits",   1.000, 0.000
		Out16Active         = bits,    U08,    22, [0:0]
		Out16Good   	    = bits,    U08,    22, [1:1]
		Out16Open     	    = bits,    U08,    22, [2:2]
		Out16Short          = bits,    U08,    22, [3:3]
		Out16Overload       = bits,    U08,    22, [4:4]
		Out16Spare1        	= bits,    U08,    22, [5:5]
		Out16Spare2  		= bits,    U08,    22, [6:6]
		Out16Spare3  		= bits,    U08,    22, [7:7]
    InputPortx         		= scalar, U08,  23, "bits",   1.000, 0.000
		Input01            	= bits,    U16,    23, [0:0]
		Input02	            = bits,    U16,    23, [1:1]
		Input03  	        = bits,    U16,    23, [2:2]
		Input04           	= bits,    U16,    23, [3:3]
		Input05           	= bits,    U16,    23, [4:4]
		Input06        	    = bits,    U16,    23, [5:5]
		Input07        		= bits,    U16,    23, [6:6]
		Input08        		= bits,    U16,    23, [7:7]
		Input09            	= bits,    U16,    23, [8:8]
		Input10          	= bits,    U16,    23, [9:9]
		Input11          	= bits,    U16,    23, [10:10]
		Input12           	= bits,    U16,    23, [11:11]
		Input13        		= bits,    U16,    23, [12:12]
		Input14        		= bits,    U16,    23, [13:13]
		Input15        		= bits,    U16,    23, [14:14]
		Input16        		= bits,    U16,    23, [15:15]
	;Input01            	= scalar,    U08,    23, "",   1,0
	;	Input02	            = scalar,    U08,    24, "",   1,0
	;	Input03  	        = scalar,    U08,    25, "",   1,0
	;	Input04           	= scalar,    U08,    26, "",   1,0
	;	Input05           	= scalar,    U08,    27, "",   1,0
	;	Input06        	    = scalar,    U08,    28, "",   1,0
	;	Input07        		= scalar,    U08,    29, "",   1,0
	;	Input08        		= scalar,    U08,    30, "",   1,0
	;	Input09            	= scalar,    U08,    31, "",   1,0
	;	Input10          	= scalar,    U08,    32, "",   1,0
	;	Input11          	= scalar,    U08,    33, "",   1,0
	;	Input12           	= scalar,    U08,    34, "",   1,0
	;	Input13        		= scalar,    U08,    35, "",   1,0
	;	Input14        		= scalar,    U08,    36, "",   1,0
	;	Input15        		= scalar,    U08,    37, "",   1,0
	;	Input16        		= scalar,    U08,    38, "",   1,0
		
		AnInput01           = scalar,    U16,    25, "",   1,0
		AnInput02	        = scalar,    U16,    27, "",   1,0
		AnInput03  	        = scalar,    U16,    29, "",   1,0
		AnInput04          	= scalar,    U16,    31, "",   1,0
		AnInput05          	= scalar,    U16,    33, "",   1,0
		AnInput06        	= scalar,    U16,    35, "",   1,0
		AnInput07        	= scalar,    U16,    37, "",   1,0
		AnInput08        	= scalar,    U16,    39, "",   1,0
	
		;CANout1				= scalar, U08,  54, "bits",   1.000, 0.000
		;Out15Active         = bits,    U08,    54, [0:0]
		;Out15Good   	    = bits,    U08,    54, [1:1]
		;Out15Open     	    = bits,    U08,    54, [2:2]
		;Out15Short          = bits,    U08,    54, [3:3]
		;Out15Overload       = bits,    U08,    54, [4:4]
		;Out15Spare1        	= bits,    U08,    54, [5:5]
		;Out15Spare2  		= bits,    U08,    54, [6:6]
		;Out15Spare3  		= bits,    U08,    54, [7:7]
	
;	   secl             = scalar, U08,  0, "sec",    1.000, 0.000
 ;  squirt           = scalar, U08,  1, "bits",   1.000, 0.000
 ;   inj1Status       = bits,    U08,    1, [0:0]
 ;   inj2Status       = bits,    U08,    1, [1:1]
 ;   inj3Status       = bits,    U08,    1, [2:2]
 ;   inj4Status       = bits,    U08,    1, [3:3]
 ;   DFCOOn           = bits,    U08,    1, [4:4]
 ;   boostCutFuel     = bits,    U08,    1, [5:5]
  ;  toothLog1Ready   = bits,    U08,    1, [6:6]
 ;   toothLog2Ready   = bits,    U08,    1, [7:7]
;   engine           = scalar, U08,  2, "bits",   1.000, 0.000
;    ready            = bits,    U08,    2, [0:0]
 ;   crank            = bits,    U08,    2, [1:1]
 ;   startw           = bits,    U08,    2, [2:2]
 ;   warmup           = bits,    U08,    2, [3:3]
 ;   tpsaccaen        = bits,    U08,    2, [4:4]
 ;   tpsaccden        = bits,    U08,    2, [5:5]
 ;   mapaccaen        = bits,    U08,    2, [6:6]
 ;   mapaccden        = bits,    U08,    2, [7:7]
 ;  dwell	        = scalar, U08,  3, "ms",     0.100, 0.000
 ;  map              = scalar, U08,  4, "kpa",    2.000, 0.000
 ;  iatRaw           = scalar, U08,   5, "Â°C",    1.000, 0.000
 ;  coolantRaw       = scalar, U08,   6, "Â°C",    1.000, 0.000
 ;  tpsADC           = scalar, U08,  7, "ADC",    1.000, 0.000
 ;  batteryVoltage   = scalar, U08,  8, "V",      0.100, 0.000
 ;  afr              = scalar, U08,  9, "O2",     0.100, 0.000
 ;  egoCorrection    = scalar, U08, 10, "%",      1.000, 0.000
 ;  airCorrection    = scalar, U08, 11, "%",      1.000, 0.000
 ;  warmupEnrich     = scalar, U08, 12, "%",      1.000, 0.000
   rpm              = scalar, U16, 41, "rpm",    1.000, 0.000
 ;  accelEnrich      = scalar, U08, 15, "%",      1.000, 0.000
 ;  baroCorrection   = scalar, U08, 16, "%",      1.000, 0.000
 ;  gammaEnrich      = scalar, U08, 17, "%",      1.000, 0.000
 ;  veCurr           = scalar, U08, 18, "%",      1.000, 0.000
 ;  afrTarget        = scalar, U08, 19  "O2",     0.100, 0.000
 ;  pulseWidth       = scalar, U08, 20, "ms",     0.1,   0.000
 ;  TPSdot           = scalar, U08, 21, "%/s",    10.00, 0.000
 ;  advance          = scalar, U08, 22, "deg",    1.000, 0.000
 ;  tps              = scalar, U08, 23, "%",      1.000, 0.000
 ;  loopsPerSecond   = scalar, S16, 24, "loops",  1.000, 0.000
 ;  freeRAM          = scalar, S16, 26, "bytes",  1.000, 0.000
  ; batCorrection    = scalar, U08, 28, "%",      1.000, 0.000
 ;  spark            = scalar, U08, 29, "bits",   1.000, 0.000
 ;   launchHard       = bits,    U08,    29, [0:0]
 ;   launchSoft       = bits,    U08,    29, [1:1]
 ;   hardLimitOn      = bits,    U08,    29, [2:2]
 ;   softlimitOn      = bits,    U08,    29, [3:3]
 ;   boostCutSpark    = bits,    U08,    29, [4:4]
 ;   sparkUnusedf     = bits,    U08,    29, [5:5]
 ;   sparkUnusedg     = bits,    U08,    29, [6:6]
 ;   sparkUnusedh     = bits,    U08,    29, [7:7]
 ;  afr2             = scalar, U08, 30, "O2",     0.100, 0.000
 ;  rpmDOT           = scalar, S16, 31, "rpm/s",  1.000, 0.000
;   flex             = scalar, U08, 33, "%",      1.000, 0.000

   time             = { timeNow                                      } ; "timeNow" is a parameterless built-in function.
   seconds          = { secl                                          };

    pwm1_load = { getChannelValueByOffset( pwm_opt_load_1_offset ) }
  ;  pwm2_load = { getChannelValueByOffset( pwm_opt_load_2_offset ) }
  ;  pwm3_load = { getChannelValueByOffset( pwm_opt_load_3_offset ) }
  ;  pwm4_load = { getChannelValueByOffset( pwm_opt_load_4_offset ) }
  ;  pwm5_load = { getChannelValueByOffset( pwm_opt_load_5_offset ) }
  ;  pwm6_load = { getChannelValueByOffset( pwm_opt_load_6_offset ) }
   ;  pwm7_load = { getChannelValueByOffset( pwm_opt_load_7_offset ) }
  ;  pwm8_load = { getChannelValueByOffset( pwm_opt_load_8_offset ) }
  ;  pwm9_load = { getChannelValueByOffset( pwm_opt_load_9_offset ) }
  ;  pwm10_load = { getChannelValueByOffset( pwm_opt_load_10_offset ) }
  ;  pwm11_load = { getChannelValueByOffset( pwm_opt_load_11_offset ) }
  ;  pwm12_load = { getChannelValueByOffset( pwm_opt_load_12_offset ) }
   ;  pwm13_load = { getChannelValueByOffset( pwm_opt_load_13_offset ) }
  ;  pwm14_load = { getChannelValueByOffset( pwm_opt_load_14_offset ) }
  ;  pwm15_load = { getChannelValueByOffset( pwm_opt_load_15_offset ) }
  ;  pwm16_load = { getChannelValueByOffset( pwm_opt_load_16_offset ) }

;for new style io config tables  
pwm1_root = { getChannelValueByOffset( pwm1_root_canidA,pwm1_root_offsetA ) }
pwm2_root = { getChannelValueByOffset( pwm2_root_canidA,pwm2_root_offsetA ) }
;pwm3_load = { getChannelValueByOffset( gen_pwm_load_canidC,gen_pwm_load_offsetC ) }
;pwm4_load = { getChannelValueByOffset( gen_pwm_load_canidD,gen_pwm_load_offsetD ) }

pwm1_xaxis = { getChannelValueByOffset( pwm1_xaxis_canidA,pwm1_xaxis_offsetA ) }
pwm2_xaxis = { getChannelValueByOffset( pwm2_xaxis_canidA,pwm1_xaxis_offsetA ) }
;pwm3_xaxis = { getChannelValueByOffset( gen_pwm_xaxis_canidC,gen_pwm_xaxis_offsetC ) }
;pwm4_xaxis = { getChannelValueByOffset( gen_pwm_xaxis_canidD,gen_pwm_xaxis_offsetD ) }

;-------------------------------------------------------------------------------

[Datalog]
   ; Full datalog.
   ;
   ; Default user-defined log emulates the full datalog.
   ;
   ; The entries are saved in the datalog file in the order in
   ; which they appear in the list below.
   ;
   ;   Channel - Case sensitive name of output channel to be logged.
   ;   Label   - String written to header line of log.  Be careful
   ;             about changing these, as programs like MSLVV and
   ;             MSTweak key off specific column names.
   ;   Type    - Data type of output, converted before writing.
   ;   Format  - C-style output format of data.
   ;
   ;       Channel          Label          Type    Format
   ;       --------------   ----------     -----   ------
   entry = time,            "Time",        float,  "%.3f"
   entry = secl,            "SecL",        int,    "%d"
;   entry = rpm,             "RPM",         int,    "%d"
;   entry = map,             "MAP",         int,    "%d"
;   entry = tpsADC,          "tpsADC",      int,    "%d"
;   entry = tps,             "TPS",         int,    "%d"
;   entry = afr,             "O2",          float,  "%.3f"
;   entry = iat,             "IAT",         int,    "%d"
;   entry = coolant,         "CLT",         int,    "%d"
;   entry = engine,          "Engine",      int,    "%d"
;   entry = squirt,          "Squirt",      int,    "%d"
;   entry = egoCorrection,   "Gego",        int,    "%d"
;   entry = airCorrection,   "Gair",        int,    "%d"
;   entry = warmupEnrich,    "Gwarm",       int,    "%d"
;   entry = baroCorrection,  "Gbaro",       int,    "%d"
;   entry = gammaEnrich,     "Gammae",      int,    "%d"
;   entry = accelEnrich,     "TPSacc",      int,    "%d"
;   entry = veCurr,          "VE",          int,    "%d"
;   entry = pulseWidth,      "PW",          float,  "%.1f"
;   entry = afrTarget,       "AFR Target",  int,    "%d"
;   entry = pulseWidth,      "PW2",         float,  "%.1f"
;   entry = dutyCycle,       "DutyCycle1",  float,  "%.1f"
;   entry = dutyCycle,       "DutyCycle2",  float,  "%.1f"
;   entry = TPSdot,          "TPS DOT",   int,    "%d"
;   entry = advance,         "Ignition Advance", int,"%d"
;   entry = batteryVoltage,  "Battery V",   float,  "%.1f"
;   entry = rpmDOT,          "rpm/s",       int,    "%d"
   
